---
# Copyright 2024 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Remove Data Services associated with the environment
  hosts: localhost
  connection: local
  gather_facts: no
  
  tasks:

############# Environment Discovery & Validation #############

    # Find details about the environment
    - name: Discover and Validate CDP environment details
      tags:
        - always
      block:
        - name: Fetch the Environment Name from the Terraform outputs
          ansible.builtin.set_fact:
            cdp_env: "{{ lookup('cloud.terraform.tf_output', 'cdp_environment_name', project_path='tf-cdp-env') }}"

        - name: Retrieve details of the CDP environment
          cloudera.cloud.env_info:
            name: "{{ cdp_env }}"
          register: __cdp_environment_info

        - name: Verify that environment is in running state
          ansible.builtin.assert:
            that:
              - __cdp_environment_info.environments | length == 1
              - __cdp_environment_info.environments[0].status == 'AVAILABLE'
            fail_msg: "Environemt '{{ cdp_env }}' not found or not in Available state"

        - name: Set fact for the target environment
          ansible.builtin.set_fact:
            target_env: "{{ (__cdp_environment_info.environments |  selectattr('environmentName', 'contains', cdp_env)|first) }}"

        # Extract details about the environment
        - name: Find details about __cdp_environments_to_delete
          ansible.builtin.set_fact:
            __env_details: "{{ env_details }}"
          vars:
            network_details: "{{ target_env.network | default([]) }}"
            cloud_platform: "{{ target_env.cloudPlatform }}"
            env_details: 
              env_name: "{{ target_env.environmentName }}"
              crn: "{{ target_env.crn }}"
              status: "{{ target_env.status }}"
              cloud_platform: "{{ cloud_platform }}"
              region: "{{ target_env.region }}"
              credential_name: "{{ target_env.credentialName| default(omit)}}"
              # network id key is cloud platform dependent
              network_id: "{{ network_details[cloud_platform | lower] | default(None) | community.general.json_query('networkId||vpcId||networkName') or omit }}"
              subnets: "{{ network_details | community.general.json_query('subnetIds') or omit }}"

########## DataHubs ############

    - name: Execute DataHub teardown
      tags:
        - dh
      block:
        - name: Retrieve details of DataHubs
          cloudera.cloud.datahub_cluster_info:
            environment: "{{ __env_details.env_name }}"
          register: __dh_info

        - name: Delete all DataHubs associated with the environment
          when:
            - __dh_info.datahubs is defined
            - __dh_info.datahubs | length > 0
          cloudera.cloud.datahub_cluster:
            environment: "{{ __dh_item.environmentName }}"
            cluster_name: "{{ __dh_item.clusterName }}"
            state: "absent"
            wait: yes
          loop_control:
            loop_var: __dh_item
            label: "{{ __dh_item.clusterName }}"
          loop: "{{ __dh_info.datahubs }}"
          async: 3600 # 1 hour timeout
          poll: 0
          register: __dh_async


############# DataHubs - Wait #############

    - name: Monitor the delete of DataHubs
      when:
        - __dh_async is defined
        - __dh_async.results is defined
        - __dh_async.results | length > 0
      ansible.builtin.async_status:
        jid: "{{ __teardown.ansible_job_id }}"
      loop_control:
        loop_var: __teardown
        label: "{{ __teardown.__dh_item.clusterName | default('Unknown') }}"
      loop: "{{ __dh_async.results }}"
      register: __teardown_async
      until: __teardown_async.finished
      retries: 120
      delay: 30
      tags:
        - dh
